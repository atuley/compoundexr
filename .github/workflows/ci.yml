name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: compoundexr_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.15.7'
          otp-version: '26.0'

      - name: Cache Mix dependencies
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run tests
        env:
          MIX_ENV: test
          DATABASE_URL: ecto://postgres:postgres@localhost:5432/compoundexr_test
        run: mix test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This ensures we get the full git history

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.15.7'
          otp-version: '26.0'

      - name: Cache Mix dependencies
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get

      - name: Deploy to Gigalixir
        env:
          GIGALIXIR_EMAIL: ${{ secrets.GIGALIXIR_EMAIL }}
          GIGALIXIR_API_KEY: ${{ secrets.GIGALIXIR_API_KEY }}
          GIGALIXIR_APP_NAME: ${{ secrets.GIGALIXIR_APP_NAME }}
        run: |
          if [ -z "$GIGALIXIR_EMAIL" ] || [ -z "$GIGALIXIR_API_KEY" ] || [ -z "$GIGALIXIR_APP_NAME" ]; then
            echo "Error: Missing required secrets"
            echo "Please ensure GIGALIXIR_EMAIL, GIGALIXIR_API_KEY, and GIGALIXIR_APP_NAME are set in your repository secrets"
            exit 1
          fi
          
          # URL encode the email address
          ENCODED_EMAIL=$(printf %s "$GIGALIXIR_EMAIL" | jq -sRr @uri)
          
          echo "Adding Gigalixir remote..."
          git remote add gigalixir "https://${ENCODED_EMAIL}:${GIGALIXIR_API_KEY}@git.gigalixir.com/${GIGALIXIR_APP_NAME}.git"
          
          echo "Pushing to Gigalixir..."
          git push -f gigalixir HEAD:refs/heads/main 